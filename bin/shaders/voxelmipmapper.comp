//https://github.com/Microsoft/DirectX-Graphics-Samples/blob/master/MiniEngine/Core/Shaders/GenerateMipsCS.hlsli
#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define COLOR_IMAGE_POSX_3D_BINDING 0
#define COLOR_IMAGE_NEGX_3D_BINDING 1
#define COLOR_IMAGE_POSY_3D_BINDING 2
#define COLOR_IMAGE_NEGY_3D_BINDING 3
#define COLOR_IMAGE_POSZ_3D_BINDING 4
#define COLOR_IMAGE_NEGZ_3D_BINDING 5
#define COLOR_IMAGE_COUNT 6

// Voxel grid
// Read	mip0
// Ordered as dir1,dir2,dir3 - mip 0
layout(set = 0, binding = 0) uniform sampler3D rVoxelColor;						// Read
// Write mip1 and mip2
// ordered as dir0mip1,dir1mip1,dir2mip1,dir3mip1,dir4mip1
layout(set = 0, binding = 1, rgba8) writeonly uniform image3D wVoxelColor[2];	// Write
//uniform buffers
layout (set = 0, binding = 2) uniform UBO 
{
	uint srcMipLevel;
	uint numMipLevels;
	uint cascadeCount;
	float padding0;
	vec3 texelSize;
	uint gridSize;
} ubo;
layout(push_constant) uniform PushConsts
{
	layout(offset = 0)uint cascadeNum;		// The current cascade
} pc;

shared float gs_R[512];
shared float gs_G[512];
shared float gs_B[512];
shared float gs_A[512];

void StoreColor(uint index, vec4 color)
{
	gs_R[index] = color.r;
	gs_G[index] = color.g;
	gs_B[index] = color.b;
	gs_A[index] = color.a;
}

vec4 LoadColor( uint index )
{
	return vec4( gs_R[index], gs_G[index], gs_B[index], gs_A[index]);
}

// https://research.nvidia.com/sites/default/files/publications/GIVoxels-pg2011-authors.pdf
// Alpha blend RGB, average Alpha
vec4 AlphaBlend(vec4 front, vec4 back)
{
	vec4 ac;
	//vec3 backCol = (1.0-front.a)*back.rgb;
	//ac.rgb = front.rgb + backCol;
	//ac.a = front.a;


	// TODO: might need different blending
	// Calculate the back color with the alpha of the front as weight
	vec3 backCol = (1.0-front.a)*back.rgb;
    ac.rgb = backCol + front.rgb;
	// Alpha not blended, just averaged
    ac.a = (front.a+back.a)/2.0; 
	// Weight the accumulated color witht he averaged alpha
	//ac.rgb *= ac.a;

	//return front + back;
    return ac;
}

vec4 CalcDirectionalColor(
    vec4 col1, vec4 col2, vec4 col3, vec4 col4, 
    vec4 col5, vec4 col6, vec4 col7, vec4 col8,
	uint direction)
{
	// Calculate all the colors from front to back voxels
	// Calculate the colors in world space, not texture space. (right hand)
	// ------------------  ------------------
	// |  1    |   2    |  |  5    |   6    |
	// |       |        |  |       |        |
	// |----------------|  |----------------|
	// |  3    |   4    |  |  7    |   8    |
	// |       |        |  |       |        |
	// |----------------|  |----------------|

	vec4 color1,color2,color3,color4;
	if(direction == COLOR_IMAGE_POSX_3D_BINDING)   // right
	{
		color1 = AlphaBlend(col2, col1);
		color2 = AlphaBlend(col6, col5);
		color3 = AlphaBlend(col4, col3);
		color4 = AlphaBlend(col8, col7);
	}
	else if(direction == COLOR_IMAGE_NEGX_3D_BINDING)	// left
	{
		color1 = AlphaBlend(col1, col2);
		color2 = AlphaBlend(col5, col6);
		color3 = AlphaBlend(col3, col4);
		color4 = AlphaBlend(col8, col7);
	}
	else if(direction == COLOR_IMAGE_POSY_3D_BINDING)  // up
	{
		color1 = AlphaBlend(col5, col7);
		color2 = AlphaBlend(col1, col3);
		color3 = AlphaBlend(col6, col8);
		color4 = AlphaBlend(col2, col4);
	}
	else if(direction == COLOR_IMAGE_NEGY_3D_BINDING)	//down
	{
		color1 = AlphaBlend(col7, col5);
		color2 = AlphaBlend(col3, col1);
		color3 = AlphaBlend(col8, col6);
		color4 = AlphaBlend(col4, col2);
	}
	else if(direction == COLOR_IMAGE_POSZ_3D_BINDING) // out
	{
		color1 = AlphaBlend(col1, col5);
		color2 = AlphaBlend(col2, col6);
		color3 = AlphaBlend(col3, col7);
		color4 = AlphaBlend(col4, col8);
	}
	else if(direction == COLOR_IMAGE_NEGZ_3D_BINDING) // in
	{
		color1 = AlphaBlend(col5, col1);
		color2 = AlphaBlend(col6, col2);
		color3 = AlphaBlend(col7, col3);
		color4 = AlphaBlend(col8, col4);
	}
    
	// Add all the colors
    vec4 color = color1 + color2 + color3 + color4;
	// Average all the colors
    color.rgba *= 0.25;

    return color;
}

// Set the local sizes
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

void main()
{
	// Group Index within one workgroup
	uint li = gl_LocalInvocationIndex;   // range from 0 - 8*8*8
	uvec3 gi = gl_GlobalInvocationID;	// range from [0,0,0] - [8*numdis*num_direcitons,8*numdis,8*numdis]
	// Set the cascade offset
	uint cascadeoffset = pc.cascadeNum * ubo.gridSize;
	gi.y+= cascadeoffset;

	uint textureIndex = uint(floor(gi.x / float(ubo.gridSize)));

	vec4 src;
	// Sample from mip0
	{
		// voxel coordinates
		ivec3 uv1 = (ivec3(gi.xyz) * 2 + ivec3(0,0,0)); 
		ivec3 uv2 = (ivec3(gi.xyz) * 2 + ivec3(1,0,0)); 
		ivec3 uv3 = (ivec3(gi.xyz) * 2 + ivec3(0,1,0)); 
		ivec3 uv4 = (ivec3(gi.xyz) * 2 + ivec3(1,1,0)); 
		ivec3 uv5 = (ivec3(gi.xyz) * 2 + ivec3(0,0,1)); 
		ivec3 uv6 = (ivec3(gi.xyz) * 2 + ivec3(1,0,1)); 
		ivec3 uv7 = (ivec3(gi.xyz) * 2 + ivec3(0,1,1)); 
		ivec3 uv8 = (ivec3(gi.xyz) * 2 + ivec3(1,1,1)); 

		// Front faces
		vec4 src1 = texelFetch(rVoxelColor, uv1, 0);
		vec4 src2 = texelFetch(rVoxelColor, uv2, 0);
		vec4 src3 = texelFetch(rVoxelColor, uv3, 0);
		vec4 src4 = texelFetch(rVoxelColor, uv4, 0);
		// Back faces							 
		vec4 src5 = texelFetch(rVoxelColor, uv5, 0);
		vec4 src6 = texelFetch(rVoxelColor, uv6, 0);
		vec4 src7 = texelFetch(rVoxelColor, uv7, 0);
		vec4 src8 = texelFetch(rVoxelColor, uv8, 0);

		src = CalcDirectionalColor(	src1,src2,src3,src4,
									src5,src6,src7,src8,
									textureIndex);
	}
	//store to texture
	// Write to mip1
	imageStore(wVoxelColor[0], ivec3(gi.xyz), src);

	// Early out 
	if (ubo.numMipLevels == 1) 
		return;

	// Store to shared memory
	StoreColor(li,src);
	
	// Sync with all the threads in the workgroup
	//	TODO: THIS MIGHT BE SLOW
	groupMemoryBarrier();
	barrier();

    uint row = gl_WorkGroupSize.x;
    uint slice = gl_WorkGroupSize.x * gl_WorkGroupSize.y;

	uint v000 = 0, v100 = 1, v010 = row, v110 = row+1, v001 = slice, v101 = slice+1, v011 = slice+row, v111 = row+slice+1;
	// Check if X Y, Z are even
	if ((li & 0x49) == 0)
	{
		// Front
		vec4 src1 = src;
		vec4 src2 = LoadColor(li + v100);
		vec4 src3 = LoadColor(li + v010);
		vec4 src4 = LoadColor(li + v110);
		// Back
		vec4 src5 = LoadColor(li + v001);
		vec4 src6 = LoadColor(li + v101);
		vec4 src7 = LoadColor(li + v011);
		vec4 src8 = LoadColor(li + v111);

		src = CalcDirectionalColor(	src1,src2,src3,src4,
									src5,src6,src7,src8,
									textureIndex);

		imageStore(wVoxelColor[1], ivec3(vec3(gi.xyz) * 0.5), src);

		//StoreColor(gi, src);
	}

	if (ubo.numMipLevels == 2)
		return;
}