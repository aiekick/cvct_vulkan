// http://web.cse.ohio-state.edu/~hwshen/681/Site/Slides_files/basic_algo.pdf

#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define COLOR_IMAGE_POSX_3D_BINDING 0
#define COLOR_IMAGE_NEGX_3D_BINDING 1
#define COLOR_IMAGE_POSY_3D_BINDING 2
#define COLOR_IMAGE_NEGY_3D_BINDING 3
#define COLOR_IMAGE_POSZ_3D_BINDING 4
#define COLOR_IMAGE_NEGZ_3D_BINDING 5
#define COLOR_IMAGE_COUNT 6
#define MAXCASCADE 10

#define EPS       0.0001
#define PI        3.14159265

const int MAX_STEPS = 600;
const float STEPSIZE_WRT_TEXEL = 1.0/3.0;  // Cyrill uses 1/3
const float TRANSMIT_MIN = 0.005;
const float TRANSMIT_K = 3.0;


#define EQUALS(A,B) ( abs((A)-(B)) < EPS )
#define EQUALSZERO(A) ( ((A)<EPS) && ((A)>-EPS) )

// Output
//layout(location = 0) out vec4 outFragColor;

// Voxel grid
layout(set = 0, binding = 0) uniform sampler3D rVoxelColor;
// Uniform buffers
layout (set = 0, binding = 1) uniform UBO 
{
	vec4 voxelRegionWorld[MAXCASCADE];	// list of voxel region worlds
	vec3 cameraPosition;			// Camera world position
	float fovy;						// vertical field of view in radius
	vec3 cameraLookAt;				// Camera forward vector
	float aspect;					// aspect ratio (screen width / screen height)
	vec3 cameraUp;					// Camera up vector
	uint cascadeCount;				// Number of cascades
	vec2 screenres;					// Screen resolution in pixels
	vec2 padding1;
	vec3 voxelGridResolution;		// voxel grid resolution
	float padding2;
} ubo;
// Framebuffer image
layout(set = 0, binding = 2, rgba8) writeonly uniform image2D framebufferImage;		// Write

// Global variables
float gvoxelSize = 0;
float gsideoffset = 1.0/6.0;

vec4 SampleAnisotropic(vec3 pos, vec3 dir, uint cascade, float miplevel)
{
	uvec3 isPositive = uvec3(dir.x > 0.0 ? 1:0, dir.y > 0.0 ? 1:0, dir.z > 0.0 ? 1:0);
	vec3 scalar = abs(dir);

	// Calculate the cascade offset
	float maxperCascade = (1.0/float(ubo.cascadeCount));
	float cascadeoffset = maxperCascade * cascade;
	// resize the pos range
	pos = vec3(pos.x / 6.0, pos.y / ubo.cascadeCount, pos.z);
	//pos.y = maxperCascade - pos.y;		//inerse the y;

	miplevel = min(miplevel,2);

	vec4 xtexel = textureLod(rVoxelColor, pos + vec3(gsideoffset*(isPositive.x+0),cascadeoffset,0), miplevel);
	vec4 ytexel = textureLod(rVoxelColor, pos + vec3(gsideoffset*(isPositive.y+2),cascadeoffset,0), miplevel);
	vec4 ztexel = textureLod(rVoxelColor, pos + vec3(gsideoffset*(isPositive.z+4),cascadeoffset,0), miplevel);

    return (scalar.x*xtexel + scalar.y*ytexel + scalar.z*ztexel);
}

// Transmittance accumulation
// ro = ray origin, rd = ray direction
vec4 ConetraceAccum(vec3 ro, vec3 rd)
{
	vec3 wpos = ro;				// Position in voxel space
	vec3 acol = vec3(0);		// Accumulated color
	float atm = 0.0;			// Accumulated transmittance
	vec3 stepped = vec3(0);		// total stepped

	vec4 maxregion = ubo.voxelRegionWorld[ubo.cascadeCount-1];

	// Calculate the maximum position, depending on the base
	vec3 minpos = maxregion.xyz;
	vec3 maxpos = maxregion.xyz + maxregion.w;  

	float lastSampleDist = 0;

	// Get the radius depending on the distance
	// a = half angle
	// theta = atan(a/2l);
	// aperture = tan(theta) * d
	float maxaperture = maxregion.w/20.0;	//Maximum size of a voxel, and cone scalar...
	float l = maxregion.w; 
	float theta = atan((maxaperture)/l);
	float coneTheta = tan(theta);
	
	for (uint i=0; i<MAX_STEPS; i++)
	{
		// Calculte the new world position
		vec3 pos = wpos+stepped;

		// Check if early out
		vec3 temp1 = sign(pos - minpos);
		vec3 temp2 = sign(maxpos - pos);
		float inside = dot(temp1,temp2);
		if( inside < 3 || atm > 1)	break;

		// Calculate the distance from the cam position to the voxel position
		float dist = distance(pos, wpos);
		// Cacculate the current cascade
		// dist = worldSizeMin*2^cascade
		uint cascade = uint(ceil(max(log2(dist/(ubo.voxelRegionWorld[0].w*0.5)),0.0)));			// Multiply by 0.5, because the camera is always from the center. Wont use the whole space
		cascade = min(cascade,ubo.cascadeCount-1);
		//cascade = 1;
		// Current voxelregionworld depending on cascade
		vec4 CurrentvoxelRegionWorld = ubo.voxelRegionWorld[cascade];
		// The voxel position depending on the current cascade
		vec3 voxelPosition = (pos - CurrentvoxelRegionWorld.xyz)/CurrentvoxelRegionWorld.w;		// range from 0.0-1.0

		// Calculate the voxelsize depending on cascade
		gvoxelSize = CurrentvoxelRegionWorld.w / ubo.voxelGridResolution.x;
		
		// Cacculate the aperture
		float aperture = max(coneTheta*dist,gvoxelSize);
		float mipLevel = max(log2(aperture/gvoxelSize),0.0);
		
		// Sample anisotropic
		vec4 res = SampleAnisotropic(voxelPosition, rd, cascade, mipLevel);

		// https://research.nvidia.com/sites/default/files/publications/GIVoxels-pg2011-authors.pdf
		// weight current transmittance with color
		// front-to-back accumulation
		// c = ac+(1-a)a2 p
		// a = a+(1-a) p
		acol = acol.rgb*atm+(1-atm)*res.rgb*res.a;
		atm = atm+(1-atm)*res.a;

		// Take step relative to the interpolated size
		float stepSize = aperture * STEPSIZE_WRT_TEXEL;

		//float voxelSize = (gvoxelSize)*pow(2.0,(mipLevel));
		//if(res.a > 0.8)
		//{
		//	atm = 1.0-pow(1.0-atm,stepSize/voxelSize);
		//	lastSampleDist = 0;
		//}
		//else
		//{
		//	lastSampleDist += stepSize;
		//}

		//increment stepped value
		stepped += stepSize*rd;
	}
	return vec4(acol,1);
}

// Set the local sizes
layout (local_size_x = 32, local_size_y = 32) in;

void main() 
{
	// Camera ray
	vec3 campos = ubo.cameraPosition;				// Camera position
	vec3 lookat = normalize(ubo.cameraLookAt);		// normalized lookat vector
	vec3 camup = normalize(ubo.cameraUp);			// Camera up vector
	float fovy = ubo.fovy;							// fov in the vertical axis
	//vec4 voxelRegionWorld = ubo.voxelRegionWorldMin;	// Region of the world
	float aspect = ubo.aspect;						// pixel_width / pixel_height
	vec2 screenres = ubo.screenres;					// Screen resolution
	vec3 voxelGridResolution = ubo.voxelGridResolution;	//Voxel grid resolution

	// Texture coordinate of the screen quad screenSize/currentPixel
	vec2 uv = vec2(gl_GlobalInvocationID.x/screenres.x, gl_GlobalInvocationID.y/screenres.y);					
	camup = normalize(camup);
	vec3 camright = normalize(cross(lookat,camup));
	// Field of view in X and Y
	float tanfovy = tan(radians(fovy)*0.5);
	float tanfovx = tanfovy * aspect;
	// Get the position in voxel space. normalized (camera is always in center for now, value will be 0.5)
	//vec3 vpos =	(campos-voxelRegionWorld.xyz)/voxelRegionWorld.w; 
	vec3 wpos =	campos;
	// Center point of near view plane
	vec3 cpos = lookat + wpos;
	// scale range from 0 - 1 to -1 - 1 linear
	vec2 suv = uv * 2.0 - 1.0;
	// Position on nearplane
	vec3 nearpos = cpos + suv.x*tanfovx * camright + suv.y*tanfovy * camup*-1;
	// Pixel size of the near plane in the Y Axis (d = 1)
	float pixelSizeNear = tanfovy / (screenres.y*0.5);

	// Output
	vec3 rayDirection = normalize(nearpos - wpos);
	vec3 rayOrigin = wpos + rayDirection*EPS;
	vec4 outColor = ConetraceAccum(rayOrigin, rayDirection);

	// Set background

	// Store color to framebuffer
	imageStore(framebufferImage, ivec2(gl_GlobalInvocationID.xy), outColor);
}